{"version":3,"file":"static/js/698.129c899e.chunk.js","mappings":"qQAGcA,EAAQC,EAAAA,GAAAA,GAAD,mLAgBRC,EAAID,EAAAA,GAAAA,IAAD,mEAKHE,EAAMF,EAAAA,GAAAA,GAAD,qEAKLG,GAAWH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAD,gDAGVK,EAAKL,EAAAA,GAAAA,IAAD,6PAUJM,EAASN,EAAAA,GAAAA,IAAD,gL,SCrCRO,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAErBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACX,EAAD,UACGS,EAAOG,OAAS,GACfH,EAAOI,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,YAAaC,EAAnB,EAAmBA,MAAnB,OACT,yBACE,SAACZ,EAAD,CAAYa,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMT,GAAhD,UACE,UAACJ,EAAD,YACF,SAACJ,EAAD,CAAKkB,IAAKL,EAAY,GAAD,OARhB,mCAQgB,OAAcA,GAAeM,EAASC,IAAKN,KAChE,SAACT,EAAD,WACE,SAACJ,EAAD,UAAQa,YALHF,EADA,KAclB,E,SCzBYd,EAAQC,EAAAA,GAAAA,KAAD,0FAKPE,EAAMF,EAAAA,GAAAA,GAAD,iDCelB,EAda,WACX,OAA4BsB,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAMA,OAJAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAoBC,KAAKH,EAC1B,GAAE,KAGD,UAAC,EAAD,YACE,SAAC,EAAD,8BACA,SAACjB,EAAD,CAAYC,OAAQe,MAGzB,C,+LCnBKK,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMH,EAAiB,mCAAG,sGACRG,EAAAA,EAAAA,IAAA,qCAAwCD,IADhC,uBACvBE,EADuB,EACvBA,KADuB,SAElBA,EAAKC,QAFa,mFAAH,qDAIjBC,EAAY,mCAAG,WAAMnB,GAAN,yFACHgB,EAAAA,EAAAA,IAAA,gBAAmBhB,EAAnB,oBAAiCe,EAAjC,oBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAIZG,EAAe,mCAAC,WAAMpB,GAAN,yFACJgB,EAAAA,EAAAA,IAAA,gBAAmBhB,EAAnB,4BAAyCe,EAAzC,oBADI,uBACnBE,EADmB,EACnBA,KADmB,kBAEpBA,EAAKI,MAFe,2CAAD,sDAIfC,EAAe,mCAAC,WAAMtB,GAAN,yFACJgB,EAAAA,EAAAA,IAAA,gBAAmBhB,EAAnB,4BAAyCe,EAAzC,2BADI,uBACnBE,EADmB,EACnBA,KADmB,kBAEpBA,EAAKC,SAFe,2CAAD,sDAKfK,EAAe,mCAAC,WAAMC,GAAN,uFACJR,EAAAA,EAAAA,IAAA,+BAAkCD,EAAlC,4DAA6FS,IADzF,cACrBC,EADqB,yBAEpBA,EAASR,KAAKC,SAFM,2CAAD,qD","sources":["components/MoviesList.styled.js","components/MoviesList.jsx","pages/Home.styled.js","pages/Home.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n export const Wrapper=styled.ul`\n display:grid;\n grid-template-columns: repeat(5, 1fr);\n grid-template-rows: repeat(3, 1fr);\n padding-left: 0;\n gap: 10px;\n list-style: none;\n \n\n \n`\n// export const Item=styled.li`\n//  border: 1px solid black;\n//  border-radius: 4px;\n//    `\n\nexport const Img=styled.img`\ndisplay:block;\nheight: 300px;\nwidth: 100%`\n\nexport const Title=styled.h2`\nfont-size: 14px;\nmargin: 0;\ncolor: white;\n`\nexport const StyledLink=styled(Link)`\ntext-decoration: none;\n`\nexport const Card=styled.div`\nheight: 350px;\nborder: 1px solid black;\n border-radius: 4px;\n background-color: #313131;\n &:hover{\n  box-shadow: 1px 4px 6px 0 rgba(0, 0, 0, 0.16), 0 4px 4px 0 rgba(0, 0, 0, 0.06),\n    0 1px 1px 0 rgba(0, 0, 0, 0.12);\n }\n`\nexport const TitleBox=styled.div`\n/* padding: 20px 24px; */\nheight: 50px;\nmargin: 0;\ndisplay: grid;\n    justify-items: center;\n    padding: 5px;\n    /* background-color: grey; */\n`","import {  useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport noImage from '../img/noImage.png'\nimport {Wrapper, Img, Title, StyledLink, Card,TitleBox }from'./MoviesList.styled'\n\nexport const MoviesList = ({ movies }) => {\n  // console.log(movies);\n  const location = useLocation();\n  const imgUrl = 'https://image.tmdb.org/t/p/w500';\n  return (\n    <Wrapper>\n      {movies.length > 0 &&\n        movies.map(({id, poster_path, title}) => (\n          <li key={id}>\n            <StyledLink to={`/movies/${id}`} state={{ from: location }} >\n              <Card>\n            <Img src={poster_path? `${imgUrl}${poster_path}`: noImage} alt={title} />\n            <TitleBox>\n              <Title>{title}</Title>\n              </TitleBox>\n              </Card>\n            </StyledLink>\n          </li>\n        ))}\n    </Wrapper>\n  );\n};\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      \n    }).isRequired\n  ).isRequired,\n};\n","import styled from \"styled-components\";\nexport const Wrapper=styled.main`\nmin-height: 100vh;\npadding: 5px;\n/* background-color: aqua; */\n`\nexport const Title=styled.h2`\ncolor: black;\nmargin: 0;`","\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { MoviesList } from 'components/MoviesList';\nimport { getTrendingMovies } from 'services/Api';\nimport { Wrapper, Title } from './Home.styled';\n\nconst Home = () => {\n  const [trends, setTrends] = useState([]);\n\n  useEffect(() => {\n    getTrendingMovies().then(setTrends);\n  }, []);\n\n  return (\n    <Wrapper>\n      <Title>Trending today</Title>\n      <MoviesList movies={trends} />\n    </Wrapper>\n  );\n};\nexport default Home;\nHome.propTypes={\n  trends: PropTypes.array\n}\n\n","import axios from 'axios';\nconst API_KEY = '7152fe47b59b20f9de7689c6d0de595b';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return await data.results;\n};\nexport const GetMovieById = async id => {\n  const { data } = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n  return data;\n};\nexport const getMovieCredits=async id=>{\n  const { data } = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n  return data.cast;\n}\nexport const getMovieReviews=async id=>{\n  const { data } = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n  return data.results;\n  // console.log(data.results)\n}\nexport const getMovieByQuery=async query=>{\n  const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`);\n  return response.data.results;\n  // console.log(response.data.results)\n}\n"],"names":["Wrapper","styled","Img","Title","StyledLink","Link","Card","TitleBox","MoviesList","movies","location","useLocation","length","map","id","poster_path","title","to","state","from","src","noImage","alt","useState","trends","setTrends","useEffect","getTrendingMovies","then","API_KEY","axios","data","results","GetMovieById","getMovieCredits","cast","getMovieReviews","getMovieByQuery","query","response"],"sourceRoot":""}